/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { type ParsedInitializeInstruction } from '../instructions';

export const PROGRAM_METADATA_PROGRAM_ADDRESS =
  '4FX3oHhpAkJcb2tFFrq9JBY8gc4RhCRM5g75VG9QHnj1' as Address<'4FX3oHhpAkJcb2tFFrq9JBY8gc4RhCRM5g75VG9QHnj1'>;

export enum ProgramMetadataAccount {
  Buffer,
  Metadata,
}

export enum ProgramMetadataInstruction {
  Initialize,
}

export function identifyProgramMetadataInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): ProgramMetadataInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return ProgramMetadataInstruction.Initialize;
  }
  throw new Error(
    'The provided instruction could not be identified as a programMetadata instruction.'
  );
}

export type ParsedProgramMetadataInstruction<
  TProgram extends string = '4FX3oHhpAkJcb2tFFrq9JBY8gc4RhCRM5g75VG9QHnj1',
> = {
  instructionType: ProgramMetadataInstruction.Initialize;
} & ParsedInitializeInstruction<TProgram>;
