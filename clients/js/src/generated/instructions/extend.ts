/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
} from '@solana/web3.js';
import { PROGRAM_METADATA_PROGRAM_ADDRESS } from '../programs';

export const EXTEND_DISCRIMINATOR = 8;

export function getExtendDiscriminatorBytes() {
  return getU8Encoder().encode(EXTEND_DISCRIMINATOR);
}

export type ExtendInstruction<
  TProgram extends string = typeof PROGRAM_METADATA_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type ExtendInstructionData = { discriminator: number };

export type ExtendInstructionDataArgs = {};

export function getExtendInstructionDataEncoder(): Encoder<ExtendInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: EXTEND_DISCRIMINATOR })
  );
}

export function getExtendInstructionDataDecoder(): Decoder<ExtendInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getExtendInstructionDataCodec(): Codec<
  ExtendInstructionDataArgs,
  ExtendInstructionData
> {
  return combineCodec(
    getExtendInstructionDataEncoder(),
    getExtendInstructionDataDecoder()
  );
}

export type ExtendInput = {};

export function getExtendInstruction<
  TProgramAddress extends Address = typeof PROGRAM_METADATA_PROGRAM_ADDRESS,
>(config?: {
  programAddress?: TProgramAddress;
}): ExtendInstruction<TProgramAddress> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PROGRAM_METADATA_PROGRAM_ADDRESS;

  const instruction = {
    programAddress,
    data: getExtendInstructionDataEncoder().encode({}),
  } as ExtendInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedExtendInstruction<
  TProgram extends string = typeof PROGRAM_METADATA_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: ExtendInstructionData;
};

export function parseExtendInstruction<TProgram extends string>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>
): ParsedExtendInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getExtendInstructionDataDecoder().decode(instruction.data),
  };
}
