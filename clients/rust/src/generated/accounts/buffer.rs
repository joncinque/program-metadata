//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::AccountDiscriminator;
use crate::generated::types::Seed;
use crate::hooked::RemainderOptionPubkey;
use crate::hooked::ZeroableOptionPubkey;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use kaigan::types::RemainderVec;
use solana_program::pubkey::Pubkey;

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Buffer {
    pub discriminator: AccountDiscriminator,
    pub program: ZeroableOptionPubkey,
    pub authority: ZeroableOptionPubkey,
    pub canonical: bool,
    pub seed: Seed,
    pub data: RemainderVec<u8>,
}

impl Buffer {
    pub fn create_pda(
        program: Pubkey,
        authority: RemainderOptionPubkey,
        seed: Seed,
        bump: u8,
    ) -> Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError> {
        solana_program::pubkey::Pubkey::create_program_address(
            &[
                program.as_ref(),
                authority.to_string().as_ref(),
                seed.to_string().as_ref(),
                &[bump],
            ],
            &crate::PROGRAM_METADATA_ID,
        )
    }

    pub fn find_pda(
        program: &Pubkey,
        authority: RemainderOptionPubkey,
        seed: Seed,
    ) -> (solana_program::pubkey::Pubkey, u8) {
        solana_program::pubkey::Pubkey::find_program_address(
            &[
                program.as_ref(),
                authority.to_string().as_ref(),
                seed.to_string().as_ref(),
            ],
            &crate::PROGRAM_METADATA_ID,
        )
    }

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Buffer {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}
